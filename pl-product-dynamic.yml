server:
  port: 8081

eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/

# The OAuth2 server definition that would be used to send the authorization requests to
authserver:
    hostname: localhost
    port: 8899
    contextPath: userauth

# Note that the "/user" endpoint needs to provide the principle of the logged in user (/me endpoint)
spring:
  data:
    mongodb:
      uri: mongodb://localhost:27017
      database: pl-product
  oauth2:
    resource: 
      userInfoUri: http://${authserver.hostname}:${authserver.port}/${authserver.contextPath}/me
      preferTokenInfo: false 

---

spring:
  profiles: docker
  data:
    mongodb:
      uri: mongodb://192.168.56.101:27017
      database: pl-product
eureka:
# Register our microservices to Eureka using hostnames in a Docker environment will not work, they will all get 
# one and the same hostname. Instead we configure them to use its IP address during registration with Eureka.
  instance:
    preferIpAddress: true
  client:
    serviceUrl:
      defaultZone: http://192.168.56.101:8761/eureka/
      
# The OAuth2 server definition that would be used to send the authorization requests to
authserver:
    hostname: 192.168.56.101
    port: 8899
    contextPath: userauth
    
# Define the port where the API gateway server would be running. This could always be port 8080
# since each docker container has it's own IP
server:
  port: 8080